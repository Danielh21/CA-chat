/*
 * 
 */
package client;

import java.util.List;
import java.util.Observable;
import java.util.Observer;
import javax.swing.DefaultListModel;
import javax.swing.ListSelectionModel;

/**
 *
 * @author cherry
 */
public class ClientGUI extends javax.swing.JFrame implements Observer {

    Client client;
    private static String address = "localhost";
    private static int port = 8080;

    /**
     * Creates new form ClientGUI
     */
    public void doConnect() {
        client = new Client();
        client.addObserver(this);
        new Thread(new Connector()).start();
    }

    public ClientGUI() {
        initComponents();
        userList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        userList.setModel(userListModel);

//        Thread listThread = new Thread(new Listerner());
//        listThread.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chatBoxSP = new javax.swing.JScrollPane();
        ChatBox = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        textMessage = new javax.swing.JTextField();
        sendBtn = new javax.swing.JButton();
        ipFld = new javax.swing.JTextField();
        portFld = new javax.swing.JTextField();
        connectBtn = new javax.swing.JButton();
        usernameFld = new javax.swing.JTextField();
        loginBtn = new javax.swing.JButton();
        logoutBtn = new javax.swing.JButton();
        userSP = new javax.swing.JScrollPane();
        userList = new javax.swing.JList<String>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Awesome Chat Client");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        ChatBox.setColumns(20);
        ChatBox.setFont(new java.awt.Font("Century Schoolbook", 0, 14)); // NOI18N
        ChatBox.setRows(5);
        chatBoxSP.setViewportView(ChatBox);

        jLabel1.setFont(new java.awt.Font("Tempus Sans ITC", 3, 24)); // NOI18N
        jLabel1.setText("CHATBOX");

        textMessage.setFont(new java.awt.Font("Century Schoolbook", 0, 12)); // NOI18N

        sendBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        sendBtn.setText("SEND");
        sendBtn.setToolTipText("Click to send message");
        sendBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        sendBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendBtnActionPerformed(evt);
            }
        });

        ipFld.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ipFld.setText("127.0.0.1");
        ipFld.setToolTipText("Enter IP address");
        ipFld.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        ipFld.setMaximumSize(new java.awt.Dimension(80, 20));
        ipFld.setMinimumSize(new java.awt.Dimension(80, 20));
        ipFld.setPreferredSize(new java.awt.Dimension(80, 20));

        portFld.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        portFld.setText("8080");
        portFld.setToolTipText("Enter port");
        portFld.setMaximumSize(new java.awt.Dimension(10, 20));
        portFld.setMinimumSize(new java.awt.Dimension(10, 20));
        portFld.setPreferredSize(new java.awt.Dimension(40, 20));
        portFld.setRequestFocusEnabled(false);

        connectBtn.setText("Connect");
        connectBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectBtnActionPerformed(evt);
            }
        });

        usernameFld.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        usernameFld.setToolTipText("Enter name");

        loginBtn.setText("Login");
        loginBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginBtnActionPerformed(evt);
            }
        });

        logoutBtn.setText("Logout");
        logoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutBtnActionPerformed(evt);
            }
        });

        userList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        userSP.setViewportView(userList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(textMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(sendBtn))
                            .addComponent(chatBoxSP, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(49, 49, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(usernameFld, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                                    .addComponent(ipFld, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(portFld, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(connectBtn))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(loginBtn)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(logoutBtn))))
                            .addComponent(userSP, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap(147, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(chatBoxSP, javax.swing.GroupLayout.PREFERRED_SIZE, 434, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sendBtn)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ipFld, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(portFld, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(connectBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(usernameFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(loginBtn)
                            .addComponent(logoutBtn))
                        .addGap(18, 18, 18)
                        .addComponent(userSP, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sendBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendBtnActionPerformed
        if (client != null) {
            List<String> users = userList.getSelectedValuesList();
            client.sendMessage(users, textMessage.getText());
            textMessage.setText("");
        }
    }//GEN-LAST:event_sendBtnActionPerformed

    private void connectBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectBtnActionPerformed
        doConnect();
    }//GEN-LAST:event_connectBtnActionPerformed

    private void loginBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginBtnActionPerformed
    client.sendLogin(usernameFld.getText());
    loginBtn.setEnabled(false);
    }//GEN-LAST:event_loginBtnActionPerformed

    private void logoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutBtnActionPerformed
        if (client != null) {
            client.sendLogout();
            userListModel.clear();
            connectBtn.setEnabled(true);
            loginBtn.setEnabled(true);
            client = null;
        }
    }//GEN-LAST:event_logoutBtnActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (client != null) {
            client.sendLogout();        // When X is pressed
        }
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        try {
            address = args[0];
            port = Integer.parseInt(args[1]);
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("No argument");
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea ChatBox;
    private javax.swing.JScrollPane chatBoxSP;
    private javax.swing.JButton connectBtn;
    private javax.swing.JTextField ipFld;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton loginBtn;
    private javax.swing.JButton logoutBtn;
    private javax.swing.JTextField portFld;
    private javax.swing.JButton sendBtn;
    private javax.swing.JTextField textMessage;
    private javax.swing.JList<String> userList;
    private javax.swing.JScrollPane userSP;
    private javax.swing.JTextField usernameFld;
    // End of variables declaration//GEN-END:variables

    private DefaultListModel<String> userListModel = new DefaultListModel<>();

    @Override
    public void update(Observable o, Object arg) {
        String msg = arg.toString();
        if(msg.substring(0, 2).equals("##")){
            ChatBox.append(msg + "\n");
            return;
        }
        dispatchMsg(msg);
    }

    /**
     * Takes a string and checks with the protocol, then calls either:
     * onMsg(words[1], words[2]) or 
     * onClientList(words[1]) or nothing.
     * @param msg the command line arguments
     * @author Rasmus
     */
    private void dispatchMsg(String msg) { // diispatches the message to onMsg or onClienList, and does nothing if the command is not rocognized
        String[] words = msg.split(":");
        switch (words[0]) {

            case "MSGRES":
                onMsg(words[1], words[2]);
                break;
            case "CLIENTLIST":
                onClientList(words[1]);
                break;
        }
    }
    
    /**
     * Takes two Strings and appends them to the ChatBox. always starting with a new line
     * @param from is the username of the sender
     * @param msg is the message sent
     * @author Rasmus
     */
    private void onMsg(String from, String msg) { //apends the new recieved message to chatbox, only callen from handleMessage when "MSGRES"
        ChatBox.append("\n");
        ChatBox.append(from);
        ChatBox.append(": ");
        ChatBox.append(msg);
    }

    /**
     * This method will decode one string in to separate strings by splitting on "," then put the strings in a string array.
     * Then clear userListModel, then each user (string) is added the the userListModel.
     * @param msg is the list of users as one string.
     * @author Rasmus
     */
    private void onClientList(String msg) { //saperates users by "," and add them the the userListModel one by one.
        String[] users = msg.split(",");
        userListModel.clear();
        for (String user : users) {
            userListModel.addElement(user);
        }
    }

    public static String getAddress() {
        return address;
    }

    public static int getPort() {
        return port;
    }

    class Listerner implements Runnable {

        @Override
        public void run() {
            client.listen();
        }
        

    }
     class Connector implements Runnable{

            @Override
            public void run() {
                try {
                 boolean connected = client.connectToServer(ipFld.getText(), Integer.parseInt(portFld.getText()), new Listerner());
                 if(connected){
                     connectBtn.setEnabled(false);
                 }
                } catch (NumberFormatException numberFormatException) {
                    ChatBox.append("Pass a number in the Port \n");
                }
            }
         
     }

}
